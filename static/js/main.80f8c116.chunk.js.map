{"version":3,"sources":["js/constants/action-types.js","js/reducers/sparqlReducer.js","js/reducers/datasourceReducer.js","js/reducers/index.js","js/store/index.js","js/actions/index.js","js/index.js","js/components/DataSourceDropdown.js","js/components/SearchComponent.js","js/components/App.js","index.js"],"names":["SPARQL_PENDING_REQUESTS_LIST","SPARQL_REJECTED_REQUESTS_LIST","initialSparqlState","pendingRequests","rdfGraph","nodes","links","deltaRdfGrap","cloneGraph","slice","addTripleToGraph","source","subject","property","object","addNodeIfNotExists","addLinkIfNotExists","triple","link","findLink","target","push","node","findNode","uri","bron","find","d","initialConnectionState","currentDatasource","datasources","name","endpoint","reducersCombined","connection","state","action","newState","Object","assign","type","sparql","includes","error","payload","data","results","bindings","forEach","result","config","url","value","meta","form","formReducer","rootReducer","combineReducers","middleware","applyMiddleware","promise","thunk","createLogger","store","createStore","setCurrentDatasource","getUrisFromLabel","label","dispatch","sparqlAxios","getCurrentEndpoint","then","fulfillSparqlGetUriFromLabel","catch","getState","query","axios","method","qs","stringify","queryLn","ref","headers","Accept","window","Datasource","props","className","onClick","DataSourceDropdown","useDispatch","useSelector","id","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","map","item","key","SearchForm","reduxForm","handleSubmit","onSubmit","Field","component","SearchComponent","searchQuery","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80f8c116.chunk.js","sourcesContent":["export const SET_CURRENT_DATASOURCE = 'SET_CURRENT_DATASOURCE';\r\nexport const SPARQL_GET_URI_FROM_LABEL_PENDING = 'SPARQL_GET_URI_FROM_LABEL_PENDING';\r\nexport const SPARQL_GET_URI_FROM_LABEL_FULFILLED = 'SPARQL_GET_URI_FROM_LABEL_FULFILLED';\r\nexport const SPARQL_GET_URI_FROM_LABEL_REJECTED = 'SPARQL_GET_URI_FROM_LABEL_REJECTED';\r\nexport const SPARQL_GET_TRIPLES_FROM_URI = 'SPARQL_GET_TRIPLES_FROM_URI';\r\nexport const SPARQL_GET_TRIPLES_FROM_URI_PENDING = 'SPARQL_GET_TRIPLES_FROM_URI_PENDING';\r\nexport const SPARQL_GET_TRIPLES_FROM_URI_FULFILLED = 'SPARQL_GET_TRIPLES_FROM_URI_FULFILLED';\r\nexport const SPARQL_GET_TRIPLES_FROM_URI_REJECTED = 'SPARQL_GET_TRIPLES_FROM_URI_REJECTED';\r\n\r\nexport const SPARQL_PENDING_REQUESTS_LIST = [\r\n  SPARQL_GET_URI_FROM_LABEL_PENDING,\r\n  SPARQL_GET_TRIPLES_FROM_URI_PENDING,\r\n];\r\n\r\nexport const SPARQL_REJECTED_REQUESTS_LIST = [\r\n  SPARQL_GET_URI_FROM_LABEL_REJECTED,\r\n  SPARQL_GET_TRIPLES_FROM_URI_REJECTED,\r\n];\r\n","import {\r\nSPARQL_GET_URI_FROM_LABEL_FULFILLED,\r\nSPARQL_GET_TRIPLES_FROM_URI_FULFILLED,\r\nSPARQL_REJECTED_REQUESTS_LIST,\r\nSPARQL_PENDING_REQUESTS_LIST } from '../constants/action-types';\r\n\r\nconst initialSparqlState = {\r\n  pendingRequests: 0,\r\n  rdfGraph: {\r\n    nodes: [\r\n\r\n      //{\"uri\": ... , \"bron\": ..., label:....},\r\n    ],\r\n    links: [\r\n\r\n      //{\"source\": ... , \"target\": ... , \"property\" : ... },\r\n    ],\r\n    //deltaRdfMap defines which nodes and links are added\r\n    //compared to the previous state\r\n    deltaRdfGrap: {\r\n      nodes: [\r\n      ],\r\n      links: [\r\n      ],\r\n    },\r\n  },\r\n};\r\n\r\nexport const sparqlReducer = (state=initialSparqlState, action) => {\r\n  if (SPARQL_PENDING_REQUESTS_LIST.includes(action.type)) {\r\n    return {\r\n      ...state,\r\n      pendingRequests: state.pendingRequests + 1,\r\n    };\r\n  } else if (SPARQL_REJECTED_REQUESTS_LIST.includes(action.type)) {\r\n    return {\r\n      ...state,\r\n      error: action.payload,\r\n      pendingRequests: state.pendingRequests - 1,\r\n    };\r\n  }\r\n\r\n  let rdfGraph;\r\n  let deltaRdfGrap = {\r\n    nodes: [],\r\n    links: [],\r\n  };\r\n  switch (action.type) {\r\n    case SPARQL_GET_URI_FROM_LABEL_FULFILLED:\r\n      rdfGraph = cloneGraph(state.rdfGraph);\r\n      action.payload.data.results.bindings.forEach(\r\n        (result) => addTripleToGraph(rdfGraph, deltaRdfGrap, action.payload.config.url, result.subject.value, null, null)\r\n      );\r\n      return {\r\n          ...state,\r\n          rdfGraph,\r\n          deltaRdfGrap,\r\n          pendingRequests: state.pendingRequests - 1,\r\n        };\r\n    case SPARQL_GET_TRIPLES_FROM_URI_FULFILLED:\r\n      rdfGraph = cloneGraph(state.rdfGraph);\r\n      action.payload.data.results.bindings.forEach(\r\n        (result) => addTripleToGraph(rdfGraph, deltaRdfGrap, action.payload.config.url, action.meta.subject, result.property.value, result.object.value)\r\n      );\r\n      return {\r\n          ...state,\r\n          rdfGraph,\r\n          deltaRdfGrap,\r\n          pendingRequests: state.pendingRequests - 1,\r\n        };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst cloneGraph = (rdfGraph) => ({\r\n  nodes: rdfGraph.nodes.slice(),\r\n  links: rdfGraph.links.slice(),\r\n});\r\n\r\nconst addTripleToGraph = (rdfGraph, deltaRdfGrap, source, subject, property, object) => {\r\n  addNodeIfNotExists(rdfGraph.nodes, deltaRdfGrap, source, subject);\r\n  if (property != null) {\r\n    const triple = {\r\n      subject,\r\n      property,\r\n      object,\r\n    };\r\n    addLinkIfNotExists(rdfGraph, deltaRdfGrap, source, triple);\r\n  }\r\n};\r\n\r\nconst addLinkIfNotExists = (rdfGraph, deltaRdfGrap, source, triple) => {\r\n  let link = findLink(triple, rdfGraph.links);\r\n  if (link == null) {\r\n    addNodeIfNotExists(rdfGraph.nodes, deltaRdfGrap, source, triple.object);\r\n    link = {\r\n      source: triple.subject,\r\n      target: triple.object,\r\n      property: triple.property,\r\n    };\r\n    rdfGraph.links.push(link);\r\n    deltaRdfGrap.links.push(link);\r\n  }\r\n\r\n  return link;\r\n};\r\n\r\nconst addNodeIfNotExists = (nodes, deltaRdfGrap, source, subject) => {\r\n  let node = findNode(subject, nodes);\r\n  if (node != null) {\r\n    return node;\r\n  } else {\r\n    node = {\r\n      uri: subject,\r\n      bron: source,\r\n    };\r\n    nodes.push(node);\r\n    deltaRdfGrap.nodes.push(node);\r\n  }\r\n\r\n  return node;\r\n};\r\n\r\nconst findNode = (uri, nodes) => (\r\n  nodes.find((d)=> d.uri === uri)\r\n);\r\n\r\nconst findLink = (triple, links) => (\r\n  links.find((d) =>\r\n    d.source === triple.subject &&\r\n    d.property === triple.property &&\r\n    d.target === triple.object\r\n  )\r\n);\r\n\r\nexport default sparqlReducer;\r\n","import { SET_CURRENT_DATASOURCE } from '../constants/action-types';\r\n\r\nconst initialConnectionState = {\r\n  currentDatasource: 0,\r\n  datasources: [\r\n    {\r\n      name: 'Onderwijsregistratie',\r\n      endpoint: 'http://localhost:8080/rdf4j-workbench/repositories/rio/query',\r\n    },\r\n    {\r\n      name: 'Basisregistraties',\r\n      endpoint: 'https://data.pdok.nl/sparql',\r\n    },\r\n    {\r\n      name: 'Onderwijsinspectie',\r\n      endpoint: 'http://localhost:8080/rdf4j-workbench/repositories/ivho/query',\r\n    },\r\n    {\r\n      name: 'Kennisnet',\r\n      endpoint: 'http://localhost:8080/rdf4j-workbench/repositories/kennisnet/query',\r\n    },\r\n  ],\r\n};\r\n\r\nexport const datasourceReducer = (state = initialConnectionState, action) => {\r\n  let newState = Object.assign({}, state);\r\n  switch (action.type) {\r\n    case SET_CURRENT_DATASOURCE:\r\n      newState.currentDatasource = action.currentDatasource;\r\n      return newState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default datasourceReducer;\r\n","import { combineReducers } from 'redux';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport sparqlReducer from './sparqlReducer';\r\nimport datasourceReducer from './datasourceReducer';\r\n\r\nconst reducersCombined = {\r\n  connection: datasourceReducer,\r\n  sparql: sparqlReducer,\r\n  form: formReducer,\r\n};\r\n\r\nconst rootReducer = combineReducers(reducersCombined);\r\nexport default rootReducer;\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport rootReducer from '../reducers/index';\r\nimport { createLogger } from \"redux-logger\";\r\nimport thunk from \"redux-thunk\";\r\nimport promise from \"redux-promise-middleware\";\r\n\r\nconst middleware = applyMiddleware(promise, thunk, createLogger());\r\nconst store = createStore(rootReducer, middleware);\r\n\r\nexport default store;\r\n","\r\nimport { SET_CURRENT_DATASOURCE,\r\n  SPARQL_GET_URI_FROM_LABEL_PENDING,\r\n  SPARQL_GET_URI_FROM_LABEL_FULFILLED,\r\n  SPARQL_GET_URI_FROM_LABEL_REJECTED,\r\n  SPARQL_GET_TRIPLES_FROM_URI\r\n} from '../constants/action-types';\r\nimport axios from 'axios';\r\nimport store from '../store/index';\r\nimport qs from 'qs';\r\n\r\nexport const setCurrentDatasource = (currentDatasource) => ({\r\n  type: SET_CURRENT_DATASOURCE,\r\n  currentDatasource,\r\n});\r\n\r\nexport const startSparqlGetUriFromLabel = () => ({\r\n  type: SPARQL_GET_URI_FROM_LABEL_PENDING,\r\n});\r\n\r\nexport const fulfillSparqlGetUriFromLabel = (payload) => ({\r\n  type: SPARQL_GET_URI_FROM_LABEL_FULFILLED,\r\n  payload,\r\n});\r\n\r\nexport const errorSparqlGetUriFromLabel = (payload) => ({\r\n  type: SPARQL_GET_URI_FROM_LABEL_REJECTED,\r\n  payload,\r\n});\r\n\r\nexport const getTriplesFromUri = (uri, endpoint) => {\r\n  const query = 'SELECT * ' +\r\n    'WHERE { <' + uri + '> ?property ?object }' +\r\n    'limit 10';\r\n  return {\r\n    type: SPARQL_GET_TRIPLES_FROM_URI,\r\n    payload: sparqlAxios(query, endpoint),\r\n    meta: {\r\n      subject: uri,\r\n      endpoint,\r\n    },\r\n  };\r\n};\r\n\r\nexport const getUrisFromLabel = (label) => (dispatch => {\r\n    dispatch(startSparqlGetUriFromLabel());\r\n    const query = 'SELECT ?subject ' +\r\n      'WHERE { ' +\r\n        '?subject <http://www.w3.org/2000/01/rdf-schema#label> \"' + label + '\"@nl' +\r\n      '} limit 10';\r\n\r\n    sparqlAxios(query, getCurrentEndpoint())\r\n      .then(payload => {\r\n            dispatch(fulfillSparqlGetUriFromLabel(payload));\r\n            payload.data.results.bindings.forEach(triple => {\r\n              dispatch(getTriplesFromUri(triple.subject.value,\r\n                getCurrentEndpoint()));\r\n            });\r\n          })\r\n      .catch(error => {\r\n        dispatch(errorSparqlGetUriFromLabel(error));\r\n      });\r\n  });\r\n\r\nconst getCurrentEndpoint = () => {\r\n  const state = store.getState();\r\n  const currentDatasource = state.connection.currentDatasource;\r\n  const endpoint = state.connection.datasources[currentDatasource].endpoint;\r\n  return endpoint;\r\n}\r\n\r\nconst sparqlAxios = (query, endpoint) => (axios({\r\n  method: 'post',\r\n  url: endpoint,\r\n  data: qs.stringify({\r\n    action: 'exec',\r\n    queryLn: 'SPARQL',\r\n    ref: 'text',\r\n    query,\r\n  }),\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-type': 'application/x-www-form-urlencoded; charset=UTF-8',\r\n  },\r\n}));\r\n","import store from '../js/store/index';\r\nimport { setCurrentDatasource } from '../js/actions/index';\r\n\r\nwindow.store = store;\r\nwindow.setCurrentDatasource = setCurrentDatasource;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setCurrentDatasource } from '../actions/index';\r\n\r\nconst Datasource = (props) => (\r\n  <button className=\"dropdown-item\" onClick={props.onClick}>\r\n          {props.name}\r\n        </button>\r\n);\r\n\r\nconst DataSourceDropdown = () => {\r\n  let dispatch = useDispatch();\r\n  let currentDatasource = useSelector(state => state.connection.currentDatasource);\r\n  let datasources = useSelector(state => state.connection.datasources);\r\n\r\n  return (\r\n    <div className=\"setDataSourceDropdown\">\r\n      <div className=\"dropdown show\">\r\n        <button className=\"btn btn-secondary dropdown-toggle\"\r\n        id=\"dropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\"\r\n        aria-expanded=\"false\">Specificeer bron {currentDatasource}</button>\r\n        <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuLink\">\r\n          {\r\n            datasources.map((item, key) =>\r\n              <Datasource\r\n                key={key}\r\n                onClick={() => dispatch(setCurrentDatasource(key))}\r\n                name={item.name}\r\n                />\r\n            )\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>);\r\n};\r\n\r\nexport default DataSourceDropdown;\r\n","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { useDispatch } from 'react-redux';\r\nimport { getUrisFromLabel } from '../actions/index';\r\n\r\nconst Search = props => {\r\n  const { handleSubmit } = props;\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <Field name=\"searchQuery\" component=\"input\" type=\"text\" />\r\n      <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst SearchForm = reduxForm({\r\n  form: 'search',\r\n})(Search);\r\n\r\n\r\nconst SearchComponent = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  return (<SearchForm onSubmit={ state => {\r\n          dispatch(getUrisFromLabel(state.searchQuery));\r\n        }\r\n      } />);\r\n};\r\n\r\nexport default SearchComponent;\r\n","import React from 'react';\r\nimport DataSourceDropdown from './DataSourceDropdown';\r\nimport SearchComponent from './SearchComponent';\r\n\r\nconst App = () => (\r\n  <div>\r\n    <div className=\"content\">\r\n      <DataSourceDropdown/>\r\n      <SearchComponent/>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './js/index';\r\nimport store from './js/store/index';\r\nimport { Provider } from 'react-redux';\r\nimport App from './js/components/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}